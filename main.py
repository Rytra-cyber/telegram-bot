import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import requests

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç
popular_currencies = ["USD","EUR","UAH","GBP","JPY","CHF","CAD","AUD","CNY"]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è emoji
special_currency_countries = {
    "EUR": "EU",
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –≤—ã–±–æ—Ä)
user_data = {}

def country_code_to_emoji(country_code):
    try:
        return chr(127397 + ord(country_code[0])) + chr(127397 + ord(country_code[1]))
    except:
        return "‚Äì"

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç.\n"
        "–ù–∞–∂–º–∏ /convert —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.\n"
        "‚ÑπÔ∏è –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏."
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏ /convert\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
        "4Ô∏è‚É£ –í–≤–µ–¥–∏ —Å—É–º–º—É ‚Äî –∏ —è –ø–æ–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç üí±\n\n"
        "üîÅ –ü–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
        parse_mode="Markdown"
    )

# /convert
async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(f"{country_code_to_emoji(special_currency_countries.get(c, c[:2]))} {c}", callback_data=f"from_{c}")] for c in popular_currencies]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üí± *–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:*", reply_markup=reply_markup, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("from_"):
        currency = data[5:]
        user_data[user_id] = {"from": currency}
        keyboard = [[InlineKeyboardButton(f"{country_code_to_emoji(special_currency_countries.get(c, c[:2]))} {c}", callback_data=f"to_{c}")] for c in popular_currencies]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ *{currency}*\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –∫—É–¥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=reply_markup, parse_mode="Markdown")

    elif data.startswith("to_"):
        currency_to = data[3:]
        user_data[user_id]["to"] = currency_to
        await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ *{currency_to}*\nüí∞ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
async def amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_data or "from" not in user_data[user_id] or "to" not in user_data[user_id]:
        return
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    base = user_data[user_id]["from"]
    target = user_data[user_id]["to"]

    # –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞
    response = requests.get(f"https://open.er-api.com/v6/latest/{base}").json()
    if response.get("result") != "success":
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    rate = response["rates"].get(target)
    if not rate:
        await update.message.reply_text(f"‚ö†Ô∏è –í–∞–ª—é—Ç–∞ {target} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    converted = amount * rate
    base_flag = country_code_to_emoji(special_currency_countries.get(base, base[:2]))
    target_flag = country_code_to_emoji(special_currency_countries.get(target, target[:2]))

    keyboard = [[InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="restart")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n\n{base_flag} {amount} {base} ‚Üí {target_flag} {converted:.2f} {target}\nüìä *–ö—É—Ä—Å:* 1 {base} = {rate:.4f} {target}", parse_mode="Markdown", reply_markup=reply_markup)

    user_data.pop(user_id)

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
async def restart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await convert_command(query, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("convert", convert_command))
    app.add_handler(CallbackQueryHandler(button, pattern="^(from_|to_)"))
    app.add_handler(CallbackQueryHandler(restart_handler, pattern="^restart$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, amount_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
